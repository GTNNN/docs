import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.76cb5871.js";const l="/docs/assets/image_TIJLsgTVEO.cfe15652.png",o="/docs/assets/image_T9Pi3t4lHw.899156ab.png",e="/docs/assets/image_nJjeQwEdTj.f0f5aec0.png",t="/docs/assets/image_JvGstHBvXv.963311ef.png",c="/docs/assets/image_t_9YZ_tS-N.0930a2c7.png",r="/docs/assets/image_5ZN82teieP.daf6d70d.png",E="/docs/assets/image_9RDrsRgj9f.fad1770f.png",i="/docs/assets/image_qheTHqNmvB.617e678b.png",v=JSON.parse('{"title":"新一代 Web 预渲染技术！","description":"","frontmatter":{},"headers":[],"relativePath":"新一代-Web-预渲染技术！/新一代-Web-预渲染技术！.md","filePath":"新一代-Web-预渲染技术！/新一代-Web-预渲染技术！.md"}'),y={name:"新一代-Web-预渲染技术！/新一代-Web-预渲染技术！.md"},u=p('<h1 id="新一代-web-预渲染技术" tabindex="-1">新一代 Web 预渲染技术！ <a class="header-anchor" href="#新一代-web-预渲染技术" aria-label="Permalink to &quot;新一代 Web 预渲染技术！&quot;">​</a></h1><h2 id="预渲染技术" tabindex="-1">预渲染技术 <a class="header-anchor" href="#预渲染技术" aria-label="Permalink to &quot;预渲染技术&quot;">​</a></h2><p>什么是预渲染呢？</p><p>很好理解，就是当我们还没有访问页面是提前对页面进行渲染，等到我们真正访问页面时就不需要再花费额外的时间去渲染页面了。</p><p>在当今网页最重要的性能指标 <code>Core Web Vitals</code> 中，<code>Largest Contentful Paint</code> (LCP)（最大内容渲染）占据着最重要的位置，这个指标也很好理解，也就是一个网页当前视口中可见的最大元素的渲染时间。</p><p>当我们访问一个网页时，浏览器首先会从服务器请求 <code>HTML</code>。服务器返回 <code>HTML</code> 响应，然后 <code>HTML</code> 会告诉浏览器下一步的工作，包括请求 <code>CSS、JavaScript</code> 等资源。等待这些资源返回后，浏览器才会进行真正的渲染动作。</p><p>所以，在以前，想要实现预渲染可能会通过下面两种方式：</p><p>第一种是预取下个页面的资源，根据 <code>Google Chrome</code> 的统计显示，网页大约 <code>40%</code> 的可见延迟都花费在浏览器等待服务器返回的第一个字节上了，所以提前把页面的资源预取回来也可以极大的提高页面的渲染性能：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">link</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rel</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;prefetch&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;/next-page/&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;prefetch&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;/next-page/&quot;</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>另外一种方式，不仅会预取资源，还会提前进行一定的渲染：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">link</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rel</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;prerender&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;/next-page/&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;prerender&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;/next-page/&quot;</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>但除了 <code>Chrome</code> 之外，这种方式并没有得到广泛支持，而且它不是一个表达能力很强的 <code>API</code>。</p><p>后来，<code>Chrome</code> 又实现了 <code>NoState Prefetch</code>，它和 <code>&lt;link rel=&quot;prefetch&quot; href=&quot;/next-page/&quot;&gt;</code> 这种方式类似，会提前获取未来需要加载的页面所需的资源，但不会完全预渲染页面，也不会执行 <code>JavaScript</code>。</p><p><code>NoState Prefetch</code> 确实可以通过改善资源加载来帮助我们提高页面性能，但它不会像完整预渲染那样提供即时的页面加载能力。</p><p>最近，<code>Chrome</code> 团队引入一套全新的完整页面预渲染的能力。</p><p>为了避免现有用法的复杂性，并且能够让预渲染技术的未来继续发展，新的预渲染机制将不使用 <code>&lt;link rel=&quot;prerender&quot;...&gt;</code> 以及 <code>NoState Prefetch</code> 的保留的语法，未来也可能在某些节点禁用这些用法。</p><h2 id="新一代预渲染" tabindex="-1">新一代预渲染 <a class="header-anchor" href="#新一代预渲染" aria-label="Permalink to &quot;新一代预渲染&quot;">​</a></h2><p><code>Chrome</code> 提出的新一代预渲染技术将通过以下三种方式提供：</p><p>当你在 <code>Chrome</code> 地址栏中输入 <code>URL</code> 时，如果 <code>Chrome</code> 推测你会访问某个页面，它可能会自动为你预渲染这个页面。</p><p>当你在 <code>Chrome</code> 地址栏中输入一个关键词时，<code>Chrome</code> 可能会根据搜索引擎的提示自动为你预渲染页面。</p><p>这意味着啥呢？当你在地址栏输入几个关键字，还没点进去，浏览器已经在帮你渲染了！</p><p><img src="'+l+'" alt=""></p><p>大家可以通过 <code>chrome://predictors</code> 来看一下 <code>Chrome</code> 对你页面中 <code>URL</code> 的预测：</p><p><img src="'+o+'" alt=""></p><p>绿色的代表 <code>Chrome</code> 认为你有大于 <code>80%</code> 的概率会访问该页面，让你还没开始访问时，<code>Chrome</code> 已经开始为你渲染这个页面了。</p><p>黄色代表 <code>Chrome</code> 认为你有大于 <code>50%</code> 的概率会访问该页面，这时候 <code>Chrome</code> 不会进行预渲染，但是会提前帮你预取资源。</p><p>那么在 Web 开发中，我们怎么主动控制我们的网页的预渲染能力呢？</p><p><code>Speculation Rules API</code> 可以以编程的方式告诉 <code>Chrome</code> 需要预渲染哪些页面。这就取代了之前的 <code>&lt;link rel=&quot;prerender&quot;...&gt;</code> 写法，它们可以是静态配置，也可以由 JavaScript 动态注入。</p><p>后面我们会详细介绍。</p><p><img src="'+e+`" alt=""></p><p>以上是 <code>web.dev</code> 开启预渲染之前和之后的性能对比 <code>LCP</code>（最大内容渲染） 这个指标有了非常大的提升。</p><h2 id="speculation-rules-api" tabindex="-1">Speculation Rules API <a class="header-anchor" href="#speculation-rules-api" aria-label="Permalink to &quot;Speculation Rules API&quot;">​</a></h2><h3 id="数据预取" tabindex="-1">数据预取 <a class="header-anchor" href="#数据预取" aria-label="Permalink to &quot;数据预取&quot;">​</a></h3><p>将下面的 <code>JSON</code> 添加到网页中，可以触发浏览器对 <code>next.html</code> 和 <code>next17.html</code> 的数据预取：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;speculationrules&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    &quot;prefetch&quot;: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        &quot;source&quot;: &quot;list&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">        &quot;urls&quot;: [&quot;next.html&quot;, &quot;next17.html&quot;]</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;speculationrules&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    &quot;prefetch&quot;: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        &quot;source&quot;: &quot;list&quot;,</span></span>
<span class="line"><span style="color:#24292E;">        &quot;urls&quot;: [&quot;next.html&quot;, &quot;next17.html&quot;]</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p><code>Prefetch</code> 的推测规则只会对 <code>HTML</code> 文档进行预取，而不会预取页面上的子资源。</p><blockquote><p><code>（预取的数据存放在 HTTP 缓存）机制不同，通过</code>Speculation Rules\` 进行的预取，数据是保存在内存中的，所以浏览器一旦需要可以更快的访问到这些资源。</p></blockquote><p>我们可以直接在 Network 看板中看到通过 <code>Speculation Rules</code> 进行预取的资源请求：</p><p><img src="`+t+'" alt=""></p><p>其对应的资源类型为 <code>prefetch</code>，并且此类请求还会添加一个 <code>Sec-Purpose: prefetch</code> HTTP Header，服务端可以通过这个 Header 来识别这些请求。</p><p><img src="'+c+'" alt=""></p><p>另外，在 <code>Application</code> 看板中也专门新增了一个 <code>Preloading</code> 部分来帮助我们调试和查看推测规则，这里我们可以看到当前页面配置的预渲染规则集是怎样的，以及对哪些页面进行了数据预取：</p><p><img src="'+r+'" alt=""></p><p>打开一个在推测规则中的页面，我们也可以看到这个页面是成功被预取的：</p><p><img src="'+E+`" alt=""></p><h3 id="预渲染" tabindex="-1">预渲染 <a class="header-anchor" href="#预渲染" aria-label="Permalink to &quot;预渲染&quot;">​</a></h3><p>如果要实现完整页面的预渲染，将下面的 <code>JSON</code> 添加到网页中，语法和预取是一样的：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;speculationrules&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    &quot;prerender&quot;: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        &quot;source&quot;: &quot;list&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">        &quot;urls&quot;: [&quot;next.html&quot;, &quot;next17.html&quot;]</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;speculationrules&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    &quot;prerender&quot;: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        &quot;source&quot;: &quot;list&quot;,</span></span>
<span class="line"><span style="color:#24292E;">        &quot;urls&quot;: [&quot;next.html&quot;, &quot;next17.html&quot;]</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><blockquote><p>目前浏览器只能支持同站站点的预渲染，例如 <code>https://1.conardli.com</code> 可以预 <code>https://17.conardli.com</code> 上的页面。注意如果是非同源的情况，需要预渲染的页面必须包括一个 <code>Supports-Loading-Mode: credentialed-prerender</code> Header 。</p></blockquote><p>但是，与 <code>Prefetch</code> 不同的是，预渲染的请求在 Network 看板里是没办法直接看到的，因为它们是在 <code>Chrome</code> 中的单独渲染进程中获取和渲染的。</p><p>这时候，我们只能通过 <code>Application</code> 的 <code>Preloading</code> 看板来进行调试了：</p><p><img src="`+i+`" alt=""></p><h3 id="组合规则" tabindex="-1">组合规则 <a class="header-anchor" href="#组合规则" aria-label="Permalink to &quot;组合规则&quot;">​</a></h3><p>一个页面上可以同时配置多个推测规则：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;speculationrules&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  &quot;prefetch&quot;: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      &quot;source&quot;: &quot;list&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">      &quot;urls&quot;: [&quot;数据预取17.html&quot;]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;speculationrules&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  &quot;prerender&quot;: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      &quot;source&quot;: &quot;list&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">      &quot;urls&quot;: [&quot;预渲染17.html&quot;]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;speculationrules&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  &quot;prefetch&quot;: [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      &quot;source&quot;: &quot;list&quot;,</span></span>
<span class="line"><span style="color:#24292E;">      &quot;urls&quot;: [&quot;数据预取17.html&quot;]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;speculationrules&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  &quot;prerender&quot;: [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      &quot;source&quot;: &quot;list&quot;,</span></span>
<span class="line"><span style="color:#24292E;">      &quot;urls&quot;: [&quot;预渲染17.html&quot;]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>同样的，一个推测规则也可以设置为数组：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;speculationrules&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  &quot;prerender&quot;: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      &quot;source&quot;: &quot;list&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">      &quot;urls&quot;: [&quot;17.html&quot;]</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      &quot;source&quot;: &quot;list&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">      &quot;urls&quot;: [&quot;1717.html&quot;]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;speculationrules&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  &quot;prerender&quot;: [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      &quot;source&quot;: &quot;list&quot;,</span></span>
<span class="line"><span style="color:#24292E;">      &quot;urls&quot;: [&quot;17.html&quot;]</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      &quot;source&quot;: &quot;list&quot;,</span></span>
<span class="line"><span style="color:#24292E;">      &quot;urls&quot;: [&quot;1717.html&quot;]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><blockquote><p>注意：目前浏览器限制一个页面最多预渲染 10 个子页面。</p></blockquote><h3 id="js-动态添加" tabindex="-1">JS 动态添加 <a class="header-anchor" href="#js-动态添加" aria-label="Permalink to &quot;JS 动态添加&quot;">​</a></h3><p>一般来讲，推测规则可以有两种配置方式：</p><p>第一种是静态 <code>JSON</code> 的方式，对于一些拥有静态内容的页面，比如博客，一般要预渲染的页面都是固定的 ，可以用静态配置。</p><p>但是大部分网站还是动态的，我们可能要根据一些条件来动态判断要预渲染的页面，可以用 <code>JavaScript</code> 进行动态添加：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 判断浏览器是否支持 speculationrules</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (HTMLScriptElement.supports </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    HTMLScriptElement.</span><span style="color:#B392F0;">supports</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;speculationrules&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">specScript</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;script&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  specScript.type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;speculationrules&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  specRules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    prerender: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        source: </span><span style="color:#9ECBFF;">&#39;list&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        urls: [</span><span style="color:#9ECBFF;">&#39;/17.html&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  specScript.textContent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(specRules);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;添加预渲染规则: 17.html&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  document.body.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(specScript);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 判断浏览器是否支持 speculationrules</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (HTMLScriptElement.supports </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    HTMLScriptElement.</span><span style="color:#6F42C1;">supports</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;speculationrules&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">specScript</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;script&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  specScript.type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;speculationrules&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  specRules </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    prerender: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        source: </span><span style="color:#032F62;">&#39;list&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        urls: [</span><span style="color:#032F62;">&#39;/17.html&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  specScript.textContent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(specRules);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;添加预渲染规则: 17.html&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  document.body.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(specScript);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="最后" tabindex="-1">最后 <a class="header-anchor" href="#最后" aria-label="Permalink to &quot;最后&quot;">​</a></h2><p>大家觉得这个技术怎么样？欢迎在评论区留言。</p>`,65),d=[u];function q(h,g,m,F,C,b){return n(),a("div",null,d)}const k=s(y,[["render",q]]);export{v as __pageData,k as default};
